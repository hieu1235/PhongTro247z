package services;

import dao.UserDAO;
import dao.ListingDAO;
import dao.ActivityLogDAO;
import models.User;
import models.Listing;
import models.FacebookPostRequest;
import models.FacebookPostResponse;
import utils.FacebookAPIUtil;
import config.AppConfig;
import com.google.gson.Gson;
import com.google.gson.JsonObject;

import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;

public class FacebookService {
    
    private UserDAO userDAO;
    private ListingDAO listingDAO;
    private ActivityLogDAO activityLogDAO;
    private FacebookAPIUtil facebookAPIUtil;
    private Gson gson;
    
    public FacebookService() {
        this.userDAO = new UserDAO();
        this.listingDAO = new ListingDAO();
        this.activityLogDAO = new ActivityLogDAO();
        this.facebookAPIUtil = new FacebookAPIUtil();
        this.gson = new Gson();
    }
    
    /**
     * ƒêƒÉng b√†i l√™n Facebook cho m·ªôt listing c·ª• th·ªÉ
     */
    public FacebookPostResponse postListingToFacebook(Long listingId, Long userId) {
        try {
            // L·∫•y th√¥ng tin listing
            Listing listing = listingDAO.getListingById(listingId);
            if (listing == null) {
                return new FacebookPostResponse(false, "Kh√¥ng t√¨m th·∫•y tin ƒëƒÉng", "LISTING_NOT_FOUND", "");
            }
            
            // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
            if (!listing.getLandlordId().equals(userId)) {
                return new FacebookPostResponse(false, "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒëƒÉng tin n√†y", "PERMISSION_DENIED", "");
            }
            
            // L·∫•y th√¥ng tin user
            User user = userDAO.getUserById(userId);
            if (user == null || user.getFacebookPageId() == null || user.getFacebookPageAccessToken() == null) {
                return new FacebookPostResponse(false, "Ch∆∞a c·∫•u h√¨nh Facebook Page", "NO_FACEBOOK_CONFIG", "");
            }
            
            // T·∫°o n·ªôi dung ƒëƒÉng b√†i
            String postMessage = generatePostMessage(listing);
            String postLink = AppConfig.getAppBaseUrl() + "/listing/" + listing.getListingId();
            
            // L·∫•y h√¨nh ·∫£nh
            List<String> imageUrls = listingDAO.getListingImageUrls(listingId);
            
            // T·∫°o Facebook post request
            FacebookPostRequest postRequest = new FacebookPostRequest(
                postMessage,
                postLink,
                imageUrls.isEmpty() ? null : imageUrls,
                user.getFacebookPageAccessToken(),
                user.getFacebookPageId()
            );
            
            // ƒêƒÉng b√†i
            FacebookPostResponse response = facebookAPIUtil.postToFacebookPage(postRequest);
            
            // Log activity
            logFacebookActivity(userId, listingId, response);
            
            return response;
            
        } catch (Exception e) {
            System.err.println("L·ªói ƒëƒÉng b√†i Facebook cho listing " + listingId + ": " + e.getMessage());
            e.printStackTrace();
            return new FacebookPostResponse(false, "L·ªói h·ªá th·ªëng: " + e.getMessage(), "SYSTEM_ERROR", e.toString());
        }
    }
    
    /**
     * Auto post khi listing ƒë∆∞·ª£c approve
     */
    public FacebookPostResponse autoPostListingToFacebook(Long listingId) {
        try {
            Listing listing = listingDAO.getListingById(listingId);
            if (listing == null) {
                return new FacebookPostResponse(false, "Kh√¥ng t√¨m th·∫•y tin ƒëƒÉng", "LISTING_NOT_FOUND", "");
            }
            
            // Ki·ªÉm tra auto post c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
            if (!listing.isAutoPostSocial()) {
                return new FacebookPostResponse(false, "Auto post ch∆∞a ƒë∆∞·ª£c b·∫≠t cho tin ƒëƒÉng n√†y", "AUTO_POST_DISABLED", "");
            }
            
            // Ki·ªÉm tra ƒë√£ ƒëƒÉng ch∆∞a
            if (activityLogDAO.isListingPostedToFacebook(listingId, listing.getLandlordId())) {
                return new FacebookPostResponse(false, "Tin ƒëƒÉng n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng l√™n Facebook", "ALREADY_POSTED", "");
            }
            
            return postListingToFacebook(listingId, listing.getLandlordId());
            
        } catch (Exception e) {
            System.err.println("L·ªói auto post Facebook cho listing " + listingId + ": " + e.getMessage());
            e.printStackTrace();
            return new FacebookPostResponse(false, "L·ªói h·ªá th·ªëng: " + e.getMessage(), "SYSTEM_ERROR", e.toString());
        }
    }
    
    /**
     * ƒêƒÉng nhi·ªÅu listings c√πng l√∫c (batch processing)
     */
    public void processPendingAutoPostListings() {
        try {
            List<Listing> pendingListings = listingDAO.getPendingAutoPostListings();
            System.out.println("T√¨m th·∫•y " + pendingListings.size() + " tin ƒëƒÉng c·∫ßn auto post");
            
            for (Listing listing : pendingListings) {
                try {
                    // Delay gi·ªØa c√°c post ƒë·ªÉ tr√°nh spam
                    Thread.sleep(AppConfig.getAutoPostDelayBetweenPostsSeconds() * 1000);
                    
                    FacebookPostResponse response = autoPostListingToFacebook(listing.getListingId());
                    
                    if (response.isSuccess()) {
                        System.out.println("ƒê√£ ƒëƒÉng th√†nh c√¥ng listing " + listing.getListingId() + " l√™n Facebook");
                    } else {
                        System.err.println("ƒêƒÉng listing " + listing.getListingId() + " th·∫•t b·∫°i: " + response.getMessage());
                    }
                    
                } catch (InterruptedException e) {
                    System.err.println("B·ªã gi√°n ƒëo·∫°n khi ƒëƒÉng listing " + listing.getListingId());
                    e.printStackTrace();
                    Thread.currentThread().interrupt();
                    break;
                }
            }
            
        } catch (Exception e) {
            System.err.println("L·ªói process pending auto post listings: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Validate Facebook configuration
     */
    public boolean validateFacebookConfig(Long userId) {
        try {
            User user = userDAO.getUserById(userId);
            if (user == null || user.getFacebookPageId() == null || user.getFacebookPageAccessToken() == null) {
                return false;
            }
            
            return facebookAPIUtil.validatePageAccessToken(user.getFacebookPageId(), user.getFacebookPageAccessToken());
            
        } catch (Exception e) {
            System.err.println("L·ªói validate Facebook config cho user " + userId + ": " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * T·∫°o n·ªôi dung ƒëƒÉng b√†i
     */
    private String generatePostMessage(Listing listing) {
        StringBuilder message = new StringBuilder();
        
        // Ti√™u ƒë·ªÅ
        message.append("üè† ").append(listing.getTitle()).append("\n\n");
        
        // Th√¥ng tin c∆° b·∫£n
        message.append("üìç ƒê·ªãa ch·ªâ: ").append(listing.getFullAddress()).append("\n");
        
        // Gi√° thu√™
        NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
        currencyFormat.setCurrency(java.util.Currency.getInstance("VND"));
        message.append("üí∞ Gi√° thu√™: ").append(currencyFormat.format(listing.getPricePerMonth())).append("/th√°ng\n");
        
        // Di·ªán t√≠ch
        if (listing.getAreaSqm() != null) {
            message.append("üìê Di·ªán t√≠ch: ").append(listing.getAreaSqm()).append(" m¬≤\n");
        }
        
        // S·ªë ng∆∞·ªùi ·ªü
        if (listing.getMaxOccupants() != null && listing.getMaxOccupants() > 0) {
            message.append("üë• T·ªëi ƒëa: ").append(listing.getMaxOccupants()).append(" ng∆∞·ªùi\n");
        }
        
        // M√¥ t·∫£
        if (listing.getDescription() != null && !listing.getDescription().trim().isEmpty()) {
            message.append("\nüìù M√¥ t·∫£:\n").append(listing.getDescription()).append("\n");
        }
        
        // Call to action
        message.append("\nüîó Xem chi ti·∫øt v√† li√™n h·ªá t·∫°i: ");
        message.append(AppConfig.getAppBaseUrl()).append("/listing/").append(listing.getListingId());
        
        // Hashtags
        message.append("\n\n#PhongTro247 #ChoThuePhongTro #BatDongSan #PhongTro");
        
        if (listing.getAddressCity() != null) {
            message.append(" #").append(listing.getAddressCity().replaceAll("\\s+", ""));
        }
        
        return message.toString();
    }
    
    /**
     * Log Facebook activity
     */
    private void logFacebookActivity(Long userId, Long listingId, FacebookPostResponse response) {
        try {
            JsonObject details = new JsonObject();
            details.addProperty("success", response.isSuccess());
            details.addProperty("postId", response.getPostId());
            details.addProperty("message", response.getMessage());
            details.addProperty("errorCode", response.getErrorCode());
            details.addProperty("listingId", listingId);
            
            String summary = response.isSuccess() 
                ? "ƒêƒÉng b√†i l√™n Facebook th√†nh c√¥ng" 
                : "ƒêƒÉng b√†i l√™n Facebook th·∫•t b·∫°i: " + response.getMessage();
            
            activityLogDAO.createActivityLog(
                userId,
                "FACEBOOK_POST",
                listingId.toString(),
                "LISTING",
                summary,
                details.toString()
            );
            
        } catch (Exception e) {
            System.err.println("L·ªói log Facebook activity: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * L·∫•y th·ªëng k√™ Facebook posts
     */
    public JsonObject getFacebookPostStats(Long userId) {
        try {
            JsonObject stats = new JsonObject();
            
            // Posts th√†nh c√¥ng trong 7 ng√†y
            int successfulPosts7Days = activityLogDAO.getFacebookPostCount(userId, "success", 7);
            stats.addProperty("successfulPosts7Days", successfulPosts7Days);
            
            // Posts th·∫•t b·∫°i trong 7 ng√†y
            int failedPosts7Days = activityLogDAO.getFacebookPostCount(userId, "failed", 7);
            stats.addProperty("failedPosts7Days", failedPosts7Days);
            
            // Posts th√†nh c√¥ng trong 30 ng√†y
            int successfulPosts30Days = activityLogDAO.getFacebookPostCount(userId, "success", 30);
            stats.addProperty("successfulPosts30Days", successfulPosts30Days);
            
            // Posts th·∫•t b·∫°i trong 30 ng√†y
            int failedPosts30Days = activityLogDAO.getFacebookPostCount(userId, "failed", 30);
            stats.addProperty("failedPosts30Days", failedPosts30Days);
            
            // T·ªïng posts
            stats.addProperty("totalSuccessful", successfulPosts30Days);
            stats.addProperty("totalFailed", failedPosts30Days);
            stats.addProperty("totalPosts", successfulPosts30Days + failedPosts30Days);
            
            // T·ª∑ l·ªá th√†nh c√¥ng
            int totalPosts = successfulPosts30Days + failedPosts30Days;
            double successRate = totalPosts > 0 ? (double) successfulPosts30Days / totalPosts * 100 : 0;
            stats.addProperty("successRate", Math.round(successRate * 100.0) / 100.0);
            
            return stats;
            
        } catch (Exception e) {
            System.err.println("L·ªói get Facebook post stats cho user " + userId + ": " + e.getMessage());
            e.printStackTrace();
            return new JsonObject();
        }
    }
    
    /**
     * Cleanup resources
     */
    public void cleanup() {
        try {
            if (facebookAPIUtil != null) {
                facebookAPIUtil.close();
            }
        } catch (Exception e) {
            System.err.println("L·ªói cleanup FacebookService: " + e.getMessage());
            e.printStackTrace();
        }
    }
}